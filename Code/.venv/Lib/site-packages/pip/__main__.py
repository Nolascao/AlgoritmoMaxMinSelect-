def max_min_select(arr):
    """
    Função para encontrar o maior e o menor elemento de uma lista
    utilizando a abordagem de divisão e conquista.
    :param arr: Lista de números.
    :return: Uma tupla contendo o menor e o maior elemento da lista.
    """
    # Caso base: se a lista tem apenas um elemento, ele é tanto o menor quanto o maior.
    if len(arr) == 1:
        return arr[0], arr[0]

    # Caso base: se a lista tem dois elementos, basta compará-los diretamente.
    if len(arr) == 2:
        return (min(arr[0], arr[1]), max(arr[0], arr[1]))

    # Divisão: dividir a lista em duas partes.
    mid = len(arr) // 2
    left_min, left_max = max_min_select(arr[:mid])  # Menor e maior na metade esquerda.
    right_min, right_max = max_min_select(arr[mid:])  # Menor e maior na metade direita.

    # Conquista: combinar os resultados das duas metades.
    overall_min = min(left_min, right_min)
    overall_max = max(left_max, right_max)

    return overall_min, overall_max


# Testando o algoritmo
if __name__ == "__main__":
    print("Bem-vindo ao programa MaxMin Select!")
    print("Digite os números da sequência separados por espaço.")

    # Entrada do usuário
    user_input = input("Sequência de números: ")

    # Converter a entrada em uma lista de inteiros
    try:
        sequence = list(map(int, user_input.split()))

        if not sequence:
            print("A sequência não pode estar vazia. Tente novamente.")
        else:
            # Encontrar o menor e o maior elemento
            minimum, maximum = max_min_select(sequence)

            print(f"Menor elemento: {minimum}")
            print(f"Maior elemento: {maximum}")
    except ValueError:
        print("Entrada inválida! Certifique-se de digitar apenas números separados por espaço.")